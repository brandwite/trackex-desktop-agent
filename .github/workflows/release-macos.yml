name: Build & Release macOS App

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build, Sign, Notarize, and Release macOS App
    runs-on: macos-latest
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_DEVELOPER_CERT_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERT_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      # Import Apple Developer Certificate
      - name: Import Apple Developer Certificate (.p12)
        run: |
          echo "üîê Importing Apple Developer Certificate..."
          KEYCHAIN=~/Library/Keychains/build.keychain
          security create-keychain -p "$RUNNER_TEMP" build.keychain
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$RUNNER_TEMP" "$KEYCHAIN"

          # Import certificate
          security import .github/certs/certificate.p12 \
            -k "$KEYCHAIN" \
            -P "${{ secrets.APPLE_DEVELOPER_CERT_PASSWORD }}" \
            -T /usr/bin/codesign -T /usr/bin/security

          # Allow codesign access
          security set-key-partition-list -S apple-tool:,apple: -s -k "$RUNNER_TEMP" "$KEYCHAIN"

          # Make the keychain default
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "$RUNNER_TEMP" "$KEYCHAIN"

      # Debug: verify codesigning identity
      - name: List codesigning identities
        run: security find-identity -v -p codesigning

      # Build the Tauri app
      - name: Build Tauri app (macOS)
        run: npm run tauri build

      # ‚úÖ NEW: Re-sign the app with hardened runtime and secure timestamp
      - name: Re-sign app with hardened runtime
        run: |
          APP_PATH="src-tauri/target/release/bundle/macos/TrackEx Agent.app"
          echo "üîè Re-signing app with hardened runtime and secure timestamp..."
          codesign --force --deep --options runtime --timestamp \
            --entitlements src-tauri/entitlements.plist \
            --sign "Developer ID Application: ${APPLE_TEAM_ID}" \
            "$APP_PATH"

          echo "‚úÖ Verifying code signature..."
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"
          spctl --assess --type execute --verbose "$APP_PATH" || true

      # Notarize the app
      - name: Notarize app
        id: notarize
        run: |
          echo "üîç Searching for .dmg or .app..."
          FILE_PATH=$(find src-tauri/target/release/bundle/macos -name "*.dmg" -o -name "*.app" | head -n 1)
          echo "üì¶ Found file: $FILE_PATH"

          if [[ "$FILE_PATH" == *.app ]]; then
            echo "üì¶ Zipping .app for notarization..."
            ZIP_PATH="${FILE_PATH%.*}.zip"
            ditto -c -k --keepParent "$FILE_PATH" "$ZIP_PATH"
            FILE_PATH="$ZIP_PATH"
          fi

          echo "üöÄ Submitting $FILE_PATH for notarization..."
          set +e
          OUTPUT=$(xcrun notarytool submit "$FILE_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait 2>&1)
          STATUS=$?
          echo "$OUTPUT"
          set -e

          SUBMISSION_ID=$(echo "$OUTPUT" | grep -Eo '[A-F0-9-]{36}' | head -n 1)
          echo "SUBMISSION_ID=$SUBMISSION_ID" >> $GITHUB_ENV

          if [ $STATUS -ne 0 ]; then
            echo "‚ùå Notarization failed. Fetching detailed log..."
            if [ -n "$SUBMISSION_ID" ]; then
              echo "üìÑ Notarization log:"
              xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --team-id "$APPLE_TEAM_ID" \
                --password "$APPLE_APP_SPECIFIC_PASSWORD" || true
            else
              echo "‚ö†Ô∏è No submission ID found; skipping log fetch."
            fi
            exit 1
          fi

          echo "‚úÖ Notarization successful! Stapling..."
          if [[ "$FILE_PATH" == *.zip ]]; then
            APP_BUNDLE="${FILE_PATH%.zip}.app"
            xcrun stapler staple "$APP_BUNDLE"
          else
            xcrun stapler staple "$FILE_PATH"
          fi

      # Create GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            src-tauri/target/release/bundle/macos/*.dmg
            src-tauri/target/release/bundle/macos/*.app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
